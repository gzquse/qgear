Workflow for image writeing and reading it back using QCrank encoding using CudaQ

Install pre-requisites in shifter image
shifter --image=docker:nvcr.io/nvidia/nightly/cuda-quantum:latest --module=cuda-mpich /bin/bash
pip3 install qiskit qiskit-ibm-runtime qiskit-machine-learning qiskit_ibm_experiment qiskit-aer
pip3 install matplotlib h5py   scipy    jupyter notebook  bitstring coloredlogs

Also we can use pre-defined environment
# shifter --image=docker:nvcr.io/nvidia/nightly/cuda-quantum:latest --module=cuda-mpich --env PYTHONUSERBASE=$SCRATCH/pennylane_env /bin/bash

Get a GPU node for test

# Multiple nodes (interactively test)
salloc -N 1 --gpus-per-task=1 --ntasks-per-node=4 --gpu-bind=none  -t 4:00:00 -q interactive -A nintern -C gpu --image=docker:nvcr.io/nvidia/nightly/cuda-quantum:latest --module=cuda-mpich

0)- - - - - - - -
Exercise all steps  from Readme.cudaq

step 1) - - - - - - - - - - -
Configur QCrank input  (as for Qiskit)
./prep_cannedImage.py --tag e1 --nqAddr 15

OUTPUT:    out/canImg_e1_384_256.gate_list.h5

# Go inside the shifter
shifter --image=docker:nvcr.io/nvidia/nightly/cuda-quantum:latest --module=cuda-mpich /bin/bash

step 2) - - - - - - - - - - -
Generate QCrank Qiskit circuit and export it as numpy lists using
Util_CudaQ: qiskit_to_gateList()

OUTPUT:  out/cudaq_5a99eb.h5
It contains serialized circuit onformation needed by CudaQ kernel constructor
 {'circ_type': circ_type, 'gate_type': gate_type, 'gate_param': gate_param},{'gate_map':m}

[multiple GPU nodes test]
mpiexec -np 4 ./run_cudaq_job.py --circName   canImg_d2_192_128  -n 500 (depracated)

./run_cudaq.sh
measuremnt is saved in sparse array
h5-write : raw_nkey (1,) int32
h5-write : raw_ikey (1, 1301) int32

step 3) - - - - - - - - - - -
Post processing of raw data and plotting is done by as for CudaQ job
./postproc_exp.py --expName   cudaq_32efc0 --showPlots b c

OUTPUT plots: out/ibm_387aa8_f2.png , out/ibm_387aa8_f3.png  

