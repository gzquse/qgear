#--------------------------------------
# MacOS: time podman build -f Dockerfile.cudaq-qiskit -t balewski/cudaq-qiskit:p1  .
# it takes real	8m20.969s
# on PM public image:  ./podman-hpc-build.sh  -f Dockerfile.cudaq-qiskit -t cudaquanmpi-qiskit:p4 -p
# # it takes real	15m57s
#--------------------------------------
#  IMG=gzquse/cudaquanmpi-qiskit:p6
#  IMG=balewski/cudaquanmpi-qiskit:p7

ARG base_image=ghcr.io/nvidia/cuda-quantum-devdeps:ext-cu12.0-gcc11-main
FROM $base_image

ENV CUDAQ_REPO_ROOT=/workspaces/cuda-quantum
ENV CUDAQ_INSTALL_PREFIX=/usr/local/cudaq
ENV PATH="$CUDAQ_INSTALL_PREFIX/bin:${PATH}"
ENV PYTHONPATH="$CUDAQ_INSTALL_PREFIX:${PYTHONPATH}"
ENV UCX_WARN_UNUSED_ENV_VARS=n
ENV UCX_TLS=cma,cuda,cuda_copy,cuda_ipc,mm,posix,self,shm,sm,sysv,tcp

ARG workspace=.
ARG destination="$CUDAQ_REPO_ROOT"
ADD "$workspace" "$destination"
WORKDIR "$destination"

# mpich or openmpi
ARG mpi=
RUN if [ -n "$mpi" ]; \
    then \
        if [ ! -z "$MPI_PATH" ]; then \
            echo "Using a base image with MPI is not supported when passing a 'mpi' build argument." && exit 1; \
        else \
			apt update && apt install -y lib$mpi-dev ; \
		fi \
    fi

# Configuring a base image that contains the necessary dependencies for GPU
# accelerated components and passing a build argument 
#   install="CMAKE_BUILD_TYPE=Release CUDA_QUANTUM_VERSION=latest"
# creates a dev image that can be used as argument to docker/release/cudaq.Dockerfile
# to create the released cuda-quantum image.
ARG install=
ARG git_source_sha=xxxxxxxx
RUN if [ -n "$install" ]; \
    then \
        expected_prefix=$CUDAQ_INSTALL_PREFIX; \
        install=`echo $install | xargs` && export $install; \
        bash scripts/build_cudaq.sh -v; \
        if [ ! "$?" -eq "0" ]; then \
            exit 1; \
        elif [ "$CUDAQ_INSTALL_PREFIX" != "$expected_prefix" ]; then \
            mkdir -p "$expected_prefix"; \
            mv "$CUDAQ_INSTALL_PREFIX"/* "$expected_prefix"; \
            rmdir "$CUDAQ_INSTALL_PREFIX"; \
        fi; \
        echo "source-sha: $git_source_sha" > "$CUDAQ_INSTALL_PREFIX/build_info.txt"; \
    fi
RUN export OMPI_MCA_opal_cuda_support=true OMPI_MCA_btl='^openib'


# - - - - - - - CUSTOM CODE

# enable cuda-q mpi plugin

# Copy the activation script into the image
COPY ./distributed/ /opt/
# Source the script to set up the environment for MPI
RUN echo "source /opt/activate_custom_mpi.sh" >> /etc/bash.bashrc

# is needed by  tzdada which sets sth for tzdata
ARG DEBIAN_FRONTEND=noninteractive
ENV TZ=America/Los_Angeles

RUN echo 1a-AAAAAAAAAAAAAAAAAAAAAAAAAAAAA  OS update   && \
    apt-get update && \
    apt-get install -y  locales autoconf automake gcc g++ make vim wget  ssh  openssh-server sudo   git emacs aptitude build-essential xterm python3-pip   python3-tk python3-scipy python3-dev iputils-ping net-tools screen feh hdf5-tools python3-bitstring  graphviz  tzdata x11-apps && \
    apt-get clean all

# Forbid installing qiskit-terra  for qiskit 1.0 
RUN echo 2b-AAAAAAAAAAAAAAAAAAAAAAAAAAAAA   Qiskit 1.0 libs  && \
    pip3 install -c https://qisk.it/1-0-constraints qiskit[visualization] qiskit-ibm-runtime qiskit-machine-learning qiskit_ibm_experiment qiskit-aer qiskit-ionq 

# Cuda quantum
RUN echo 2c-AAAAAAAAAAAAAAAAAAAAAAAAAAAAA   Cuda quantum  && \
    pip3 install --upgrade pip && \
    pip3 install cudaq==0.9.0
#quantum-serverless is OUT
# from Aziz: qiskit1.0 does not use anymore qiskit-ibm-provider.

RUN echo 2d-AAAAAAAAAAAAAAAAAAAAAAAAAAAAA   ML+QML  libs  && \
    pip3 install scikit-learn pandas seaborn[stats]  networkx[default] optuna

RUN echo 2e-AAAAAAAAAAAAAAAAAAAAAAAAAAAAA   python libs  && \
    pip3 install --upgrade pip && \
    pip3 install matplotlib h5py   scipy    jupyter notebook  bitstring coloredlogs

# notes: python3-tk instals TK for matplotlib to display graphic
RUN echo 2f-AAAAAAAAAAAAAAAAAAAAAAAAAAAAA   python libs  && \
    pip3 install  --upgrade Pillow
# notes: Pillow is needed by matplotlib backend 'TkAgg'

# notes: cupy for gpu operations
RUN echo 2g-AAAAAAAAAAAAAAAAAAAAAAAAAAAAA   python libs  && \   
    pip3 install cupy-cuda12x fitz nvidia-ml-py3

#.... Jan: add software to fix affiniy for CPU-only running
RUN echo 2h-AAAAAAAAAAAAAAAAAAAAAAAAAAAAA  afinity and monitoring tools  && \
    apt-get update
RUN apt-get install numactl  && \
    apt-get clean all    
# use case for CPUs on PM: numactl --cpunodebind=0 --membind=0   ./run_gateList.py  --expName mac18q

RUN  pip3 install  mpi4py

#WORKDIR /root/cuda_quantum
#ENTRYPOINT ["bash", "-l"]
